class Field
  def initialize
    @layout=[
      [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2],
      [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2],
      [2,2,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2],
      [2,2,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2],
      [2,2,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2],
      [2,2,2,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,2],
      [2,2,2,1,1,1,1,1,3,1,1,3,3,3,3,3,3,3,3,1,1,1,1,1,2],
      [2,2,2,2,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2],
      [2,2,2,1,1,1,1,1,3,1,1,1,1,1,1,1,2,2,1,1,1,1,2,2,2],
      [2,2,2,1,1,1,1,1,3,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2],
      [2,2,2,1,1,1,1,1,3,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2,2],
      [2,2,2,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2],
      [2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2],
      [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2],
      [2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,1,1,2,2,2,2],
      [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    ]
    @image_field = Image.load('images/ground.png')
    @image_sea = Image.load('images/sea.png')
    @image_load = Image.load('images/load.png')

    p "constructed field"
  end

  def drawField
    @layout.each_with_index do |line, id_l|
      line.each_with_index do |num, id|
        case num
        when 1 then
          Window.draw(32 * id, 32 * id_l, @image_field)
        when 2 then
          Window.draw(32 * id, 32 * id_l, @image_sea)
        when 3 then
          Window.draw(32 * id, 32 * id_l, @image_load)
        else
        end
      end
    end
  end

  def getFieldVal(x, y)
    return @layout[y][x]
  end
end